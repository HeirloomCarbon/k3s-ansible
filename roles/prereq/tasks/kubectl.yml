---
- name: Get latest kubectl version
  uri:
    url: https://dl.k8s.io/release/stable.txt
    return_content: yes
  register: version

- name: Check if kubectl version already exists
  stat:
    path: "/opt/kubectl-{{ version.content }}/kubectl"
  register: kubectl_binary

- name: create kubectl versioned directory
  file:
    path: /opt/kubectl-{{ version.content }}
    state: directory
  become: true
  when: not kubectl_binary.stat.exists

- name: Download the latest kubectl release
  uri:
    url: https://dl.k8s.io/release/{{ version.content }}/bin/linux/amd64/kubectl
    dest: /opt/kubectl-{{ version.content }}
  register: kubectl
  become: true
  when: not kubectl_binary.stat.exists

- name: Download the kubectl checksum
  uri:
    url: https://dl.k8s.io/release/{{ version.content }}/bin/linux/amd64/kubectl.sha256
    dest: /opt/kubectl-{{ version.content }}
  register: kubectl
  become: true
  when: not kubectl_binary.stat.exists

- name: Verify kubectl binary checksum
  block:
  - name: Get kubectl sha256sum
    shell: "sha256sum /opt/kubectl-{{ version.content | trim }}/kubectl | cut -d ' ' -f1"
    register: file_shasum

  - name: Get sha256sum value from file
    command: "cat /opt/kubectl-{{ version.content | trim }}/kubectl.sha256"
    register: downloaded_shasum

  - name: Assert that the kubectl binary is OK
    assert:
      that:
      - file_shasum.stdout == downloaded_shasum.stdout.split()[0]
      fail_msg: "shasum does not correspond"
      success_msg: "kubectl shasum verified: ok"
  when: not kubectl_binary.stat.exists

- name: Change kubectl file permission
  file:
    path: "/opt/kubectl-{{ version.content }}/kubectl"
    mode: '0755'
  become: true
  when: not kubectl_binary.stat.exists


- name: create a symlink to kubectl
  file:
    src: "/opt/kubectl-{{ version.content }}/kubectl"
    dest: "/usr/bin/kubectl"
    state: link
  become: true